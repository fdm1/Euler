# /********************************************************************************
# *																				*
# The sequence of triangle numbers is generated by adding the natural numbers. 
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 

# The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?
# *
# *																				*
# ********************************************************************************/

current_factors = 0
tester = 1
goal = 5

def triangle(n)
	t = 0
	(1..n).each {|i| t += i }
	return t
end

def factors(n)
	f = 0
	(1..(n/2)).each {|i| n % i == 0 ? (f += 2; puts "#{n} % #{i} == 0") : nil }
	return f
end

while current_factors <= goal
	puts "
Tester is #{tester}"
	puts "Factors are: "
	current_factors = factors(triangle(tester))
	puts "#{tester} #{triangle(tester)} #{factors(triangle(tester))}"
	break if current_factors >= goal
	tester += 1
end

puts "The answer is #{triangle(tester)}"

